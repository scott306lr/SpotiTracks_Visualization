import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import { useQuery } from "@tanstack/react-query";
import { useEffect, useState } from "react";

import type { SpotifyData } from "../utils/dataHandler";
import { getSpotifyDataFn } from "../utils/dataHandler";

import type { Collection } from "../utils/dataHandler";
import SpotifyRadar from "../components/SpotifyRadar";
import Modal from "../components/Modal";
import MyTabs from "../components/MyTabs";
import DataPicker from "../components/DataPicker";

// Graph 1: Radar Chart Group Comparsion
//    User can select groups of songs to compare, by searching or through filtering
//    Searching: User can search for songs, artists, albums.
//    Filtering: User can filter by genre, popularity, key, etc.

// TODO: Think of a way to show the data in a more interesting way

// TODO: Share interactive legends between graphs
// TODO: Bar Chart, Pie Chart...

const Part1: React.FC = () => {
  const { data: rawData, isLoading } = useQuery(
    ["hw3"],
    getSpotifyDataFn("http://vis.lab.djosix.com:2020/data/spotify_tracks.csv")
  );
  // const [selected, setSelected] = useState<SpotifyData | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [collections, setCollections] = useState<Collection[]>([]);
  const addCollection = (
    d: SpotifyData[],
    name: string,
    color: [number, number, number] | undefined,
    id: number | undefined
  ) => {
    const collection = {
      id: id,
      name: name,
      data: d,
      color: color,
    };
    setCollections((prev) => {
      const id = collection.id ?? (prev.at(-1)?.id ?? -1) + 1;
      const name =
        collection.name === "" ? `Collection_${id}` : collection.name;
      const color = collection.color ?? [
        Math.random() * 255,
        Math.random() * 255,
        Math.random() * 255,
      ];
      return [
        ...prev,
        {
          ...collection,
          id: id,
          name: name,
          color: color,
        },
      ];
    });
  };

  useEffect(() => {
    if (rawData == null) return;

    const avg = rawData;
    const popularg25 = rawData.filter((d) => d.popularity >= 50);
    const popularl25 = rawData.filter((d) => d.popularity <= 17);
    addCollection(avg, "Average of All Tracks", undefined, undefined);
    addCollection(popularg25, "Popular Top 25%", undefined, undefined);
    addCollection(popularl25, "Popular Low 25%", undefined, undefined);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [rawData]);

  return (
    <div className="flex w-full items-center py-2">
      {/* <h1 className="w-full text-3xl">Spotify Dataset</h1> */}
      <div className="flex w-full flex-col">
        <div className="flex w-full justify-center">
          <section className="flex w-7/12 flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl">
            <MyTabs input={collections} />
          </section>
          <section className="flex w-5/12 flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl">
            <div className="rounded-lg bg-white p-5 ">
              <SpotifyRadar input={collections} />
            </div>
          </section>
        </div>
        <section className="flex w-full flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl">
          <button onClick={() => setModalOpen(true)}>Open Modal</button>
          <Modal isOpen={modalOpen} setIsOpen={setModalOpen} title={"Add"}>
            {isLoading || rawData == null ? (
              <p>Loading...</p>
            ) : (
              <>
                <div className="flex w-full flex-col items-center justify-center">
                  <DataPicker
                    data={rawData}
                    collections={collections}
                    setCollections={setCollections}
                    addCollection={addCollection}
                  />
                </div>
              </>
            )}
          </Modal>
        </section>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <div className="flex h-screen w-full flex-col items-center justify-center bg-slate-100">
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="./favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <Part1 />
      </main>
    </div>
  );
};

export default Home;
